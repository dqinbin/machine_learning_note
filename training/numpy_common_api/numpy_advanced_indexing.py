#!/usr/bin/env python
__coding__ = "utf-8"
__author__ = " Ng WaiMing "

import numpy as np

if __name__ == "__main__":
    # 如果一个ndarray是非元组序列，数据类型为整数或布尔值的ndarray，
    # 或者至少一个元素为序列对象的元组，我们就能够用它来索引ndarray。
    # 高级索引始终返回数据的副本。与此相反，切片只提供了一个视图
    # 有两种类型的高级索引：整数和布尔值

    # 整数索引
    # 这种机制有助于基于 N 维索引来获取数组中任意元素。
    # 每个整数数组表示该维度的下标值。当索引的元素个数就是目标ndarray的维度时，会变得相当直接

    # 示例
    # 获取ndarray对象中每一行指定列的一个元素。行索引包含所有行号，列索引指定要选择的元素
    a = np.array([[1, 2], [3, 4], [5, 6]])
    print(a, "\n")
    b = a[[0, 1, 1], [0, 1, 0]]
    print(b, "\n")
    # 获取 4X3 数组中的每个角处的元素,行索引是[0,0]和[3,3]，而列索引是[0,2]和[0,2]
    c = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]])
    print(c, "\n")
    rows = np.array([[0, 0], [3, 3]])
    cols = np.array([[0, 2], [0, 2]])
    d = c[rows, cols]
    print(d, "\n")

    # 高级和基本索引可以通过使用切片:或省略号...与索引数组组合。
    # 以下示例使用slice作为列索引和高级索引。
    # 当切片用于两者时，结果是相同的。 但高级索引会导致复制，并且可能有不同的内存布局

    # 示例
    e = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]])
    print(e, "\n")
    # 切片
    f = e[1:4, 1:3]
    print(f, "\n")
    # 对列使用高级索引
    g = e[1:4, [1, 2]]
    print(g, "\n")

    # 布尔索引
    # 当结果对象是布尔运算(例如比较运算符)的结果时，将使用此类型的高级索引
    # 示例
    # 大于 5 的元素会作为布尔索引的结果返回
    h = e[e > 5]
    print(h, "\n")

    # 使用~(取补运算符)来过滤NaN
    i = np.array([np.nan, 1, 2, np.nan, 3, 4, 5])
    print(i[~np.isnan(i)])

    # 从数组中过滤掉非复数元素
    j = np.array([1, 2 + 6j, 5, 3.5 + 5j])
    print(j[np.iscomplex(j)])
